from collections import OrderedDict
class LRUCache:
    def __init__(self, capacity=20):
        self.cache = OrderedDict()
        self.capacity = capacity
    def get(self, key):
        if key not in self.cache:
            return -1
        else:
            value = self.cache[key]
            del self.cache[key]
            self.cache[key] = value
            return value
    def put(self, key, value):
        if key in self.cache:
            del self.cache[key]
            self.cache[key] = value
        elif len(self.cache) == self.capacity:
            self.cache.popitem(last=False)
            self.cache[key] = value
        else:
            self.cache[key]=value
